#!/usr/bin/env python3
"""
Exemplos pr√°ticos de uso dos Templates de Email no Sistema SAOS
Demonstra como integrar os templates em diferentes cen√°rios do sistema
"""

from utils.email_template_manager import EmailTemplateManager
from utils.email_service import EmailService
from database.connection import db_connection
import json

class EmailTemplatesExamples:
    """Exemplos de uso dos templates de email"""
    
    def __init__(self):
        self.template_manager = EmailTemplateManager()
        self.email_service = EmailService()
    
    def exemplo_confirmacao_abertura(self, solicitacao_id):
        """
        Exemplo 1: Enviar email de confirma√ß√£o quando uma nova solicita√ß√£o √© criada
        """
        print("üìß Exemplo 1: Email de Confirma√ß√£o de Abertura")
        
        # Buscar dados da solicita√ß√£o
        solicitacao = self._get_solicitacao_completa(solicitacao_id)
        if not solicitacao:
            print("‚ùå Solicita√ß√£o n√£o encontrada")
            return False
        
        # Preparar vari√°veis para o template
        variaveis = {
            'codigo_referencia': solicitacao['CODIGO_REFERENCIA'],
            'nome_cliente': solicitacao['NOME_CLIENTE'],
            'titulo': solicitacao['TITULO'],
            'categoria': solicitacao['NOME_CATEGORIA'],
            'prioridade': solicitacao['NOME_PRIORIDADE'],
            'prazo_estimado': self._formatar_prazo(solicitacao['PRAZO_RESOLUCAO']),
            'descricao': solicitacao['DESCRICAO'],
            'link_acompanhamento': f"http://localhost:5001/acompanhar/{solicitacao['CODIGO_REFERENCIA']}"
        }
        
        # Enviar email usando template
        sucesso = self.template_manager.enviar_email_com_template(
            nome_template='confirmacao_abertura',
            destinatario=solicitacao['EMAIL_CLIENTE'],
            variaveis=variaveis
        )
        
        if sucesso:
            print(f"‚úÖ Email enviado para {solicitacao['EMAIL_CLIENTE']}")
            return True
        else:
            print("‚ùå Erro ao enviar email")
            return False
    
    def exemplo_atualizacao_status(self, solicitacao_id, novo_status_id, comentario=None):
        """
        Exemplo 2: Enviar email quando o status da solicita√ß√£o √© alterado
        """
        print("üìß Exemplo 2: Email de Atualiza√ß√£o de Status")
        
        # Buscar dados da solicita√ß√£o
        solicitacao = self._get_solicitacao_completa(solicitacao_id)
        if not solicitacao:
            print("‚ùå Solicita√ß√£o n√£o encontrada")
            return False
        
        # Buscar dados do novo status
        novo_status = self._get_status(novo_status_id)
        if not novo_status:
            print("‚ùå Status n√£o encontrado")
            return False
        
        # Buscar dados do t√©cnico respons√°vel
        tecnico = self._get_usuario(solicitacao['ID_TECNICO_RESPONSAVEL'])
        
        # Preparar vari√°veis para o template
        variaveis = {
            'codigo_referencia': solicitacao['CODIGO_REFERENCIA'],
            'nome_cliente': solicitacao['NOME_CLIENTE'],
            'novo_status': novo_status['NOME'],
            'cor_status': novo_status['COR'],
            'responsavel': tecnico['NOME'] if tecnico else 'Sistema',
            'data_atualizacao': self._formatar_data_atual(),
            'comentario': comentario or 'Nenhum coment√°rio adicional',
            'link_acompanhamento': f"http://localhost:5001/acompanhar/{solicitacao['CODIGO_REFERENCIA']}"
        }
        
        # Enviar email usando template
        sucesso = self.template_manager.enviar_email_com_template(
            nome_template='atualizacao_status',
            destinatario=solicitacao['EMAIL_CLIENTE'],
            variaveis=variaveis
        )
        
        if sucesso:
            print(f"‚úÖ Email de atualiza√ß√£o enviado para {solicitacao['EMAIL_CLIENTE']}")
            return True
        else:
            print("‚ùå Erro ao enviar email de atualiza√ß√£o")
            return False
    
    def exemplo_solicitacao_informacoes(self, solicitacao_id, informacoes_necessarias):
        """
        Exemplo 3: Enviar email solicitando informa√ß√µes adicionais do cliente
        """
        print("üìß Exemplo 3: Email Solicitando Informa√ß√µes")
        
        # Buscar dados da solicita√ß√£o
        solicitacao = self._get_solicitacao_completa(solicitacao_id)
        if not solicitacao:
            print("‚ùå Solicita√ß√£o n√£o encontrada")
            return False
        
        # Buscar dados do t√©cnico respons√°vel
        tecnico = self._get_usuario(solicitacao['ID_TECNICO_RESPONSAVEL'])
        
        # Preparar vari√°veis para o template
        variaveis = {
            'codigo_referencia': solicitacao['CODIGO_REFERENCIA'],
            'nome_cliente': solicitacao['NOME_CLIENTE'],
            'titulo': solicitacao['TITULO'],
            'responsavel': tecnico['NOME'] if tecnico else 'Sistema',
            'informacoes_necessarias': informacoes_necessarias,
            'link_atualizacao': f"http://localhost:5001/atualizar/{solicitacao['CODIGO_REFERENCIA']}"
        }
        
        # Enviar email usando template
        sucesso = self.template_manager.enviar_email_com_template(
            nome_template='solicitacao_informacoes',
            destinatario=solicitacao['EMAIL_CLIENTE'],
            variaveis=variaveis
        )
        
        if sucesso:
            print(f"‚úÖ Email solicitando informa√ß√µes enviado para {solicitacao['EMAIL_CLIENTE']}")
            return True
        else:
            print("‚ùå Erro ao enviar email solicitando informa√ß√µes")
            return False
    
    def exemplo_resolucao_concluida(self, solicitacao_id, solucao):
        """
        Exemplo 4: Enviar email quando a solicita√ß√£o √© resolvida
        """
        print("üìß Exemplo 4: Email de Resolu√ß√£o Conclu√≠da")
        
        # Buscar dados da solicita√ß√£o
        solicitacao = self._get_solicitacao_completa(solicitacao_id)
        if not solicitacao:
            print("‚ùå Solicita√ß√£o n√£o encontrada")
            return False
        
        # Buscar dados do t√©cnico respons√°vel
        tecnico = self._get_usuario(solicitacao['ID_TECNICO_RESPONSAVEL'])
        
        # Calcular tempo de resolu√ß√£o
        tempo_resolucao = self._calcular_tempo_resolucao(
            solicitacao['DTHR_CRIACAO'], 
            solicitacao['DTHR_RESOLUCAO']
        )
        
        # Preparar vari√°veis para o template
        variaveis = {
            'codigo_referencia': solicitacao['CODIGO_REFERENCIA'],
            'nome_cliente': solicitacao['NOME_CLIENTE'],
            'titulo': solicitacao['TITULO'],
            'solucao': solucao,
            'responsavel': tecnico['NOME'] if tecnico else 'Sistema',
            'data_resolucao': self._formatar_data(solicitacao['DTHR_RESOLUCAO']),
            'tempo_resolucao': tempo_resolucao,
            'link_avaliacao': f"http://localhost:5001/avaliar/{solicitacao['CODIGO_REFERENCIA']}"
        }
        
        # Enviar email usando template
        sucesso = self.template_manager.enviar_email_com_template(
            nome_template='resolucao_concluida',
            destinatario=solicitacao['EMAIL_CLIENTE'],
            variaveis=variaveis
        )
        
        if sucesso:
            print(f"‚úÖ Email de resolu√ß√£o enviado para {solicitacao['EMAIL_CLIENTE']}")
            return True
        else:
            print("‚ùå Erro ao enviar email de resolu√ß√£o")
            return False
    
    def exemplo_lembrete_prazo(self, solicitacao_id):
        """
        Exemplo 5: Enviar email de lembrete quando o prazo est√° pr√≥ximo
        """
        print("üìß Exemplo 5: Email de Lembrete de Prazo")
        
        # Buscar dados da solicita√ß√£o
        solicitacao = self._get_solicitacao_completa(solicitacao_id)
        if not solicitacao:
            print("‚ùå Solicita√ß√£o n√£o encontrada")
            return False
        
        # Buscar dados do t√©cnico respons√°vel
        tecnico = self._get_usuario(solicitacao['ID_TECNICO_RESPONSAVEL'])
        
        # Calcular tempo restante
        tempo_restante = self._calcular_tempo_restante(solicitacao['PRAZO_RESOLUCAO'])
        
        # Preparar vari√°veis para o template
        variaveis = {
            'codigo_referencia': solicitacao['CODIGO_REFERENCIA'],
            'nome_cliente': solicitacao['NOME_CLIENTE'],
            'titulo': solicitacao['TITULO'],
            'prazo_limite': self._formatar_prazo(solicitacao['PRAZO_RESOLUCAO']),
            'tempo_restante': tempo_restante,
            'responsavel': tecnico['NOME'] if tecnico else 'Sistema',
            'link_acompanhamento': f"http://localhost:5001/acompanhar/{solicitacao['CODIGO_REFERENCIA']}"
        }
        
        # Enviar email usando template
        sucesso = self.template_manager.enviar_email_com_template(
            nome_template='lembrete_prazo',
            destinatario=solicitacao['EMAIL_CLIENTE'],
            variaveis=variaveis
        )
        
        if sucesso:
            print(f"‚úÖ Email de lembrete enviado para {solicitacao['EMAIL_CLIENTE']}")
            return True
        else:
            print("‚ùå Erro ao enviar email de lembrete")
            return False
    
    def exemplo_escalacao_tecnico(self, solicitacao_id, tecnico_id):
        """
        Exemplo 6: Enviar email para t√©cnico quando uma solicita√ß√£o √© atribu√≠da
        """
        print("üìß Exemplo 6: Email de Escala√ß√£o para T√©cnico")
        
        # Buscar dados da solicita√ß√£o
        solicitacao = self._get_solicitacao_completa(solicitacao_id)
        if not solicitacao:
            print("‚ùå Solicita√ß√£o n√£o encontrada")
            return False
        
        # Buscar dados do t√©cnico
        tecnico = self._get_usuario(tecnico_id)
        if not tecnico:
            print("‚ùå T√©cnico n√£o encontrado")
            return False
        
        # Preparar vari√°veis para o template
        variaveis = {
            'codigo_referencia': solicitacao['CODIGO_REFERENCIA'],
            'nome_cliente': solicitacao['NOME_CLIENTE'],
            'titulo': solicitacao['TITULO'],
            'categoria': solicitacao['NOME_CATEGORIA'],
            'prioridade': solicitacao['NOME_PRIORIDADE'],
            'descricao': solicitacao['DESCRICAO'],
            'prazo_limite': self._formatar_prazo(solicitacao['PRAZO_RESOLUCAO']),
            'link_solicitacao': f"http://localhost:5001/solicitacao/{solicitacao['ID']}"
        }
        
        # Enviar email usando template
        sucesso = self.template_manager.enviar_email_com_template(
            nome_template='escalacao_tecnico',
            destinatario=tecnico['EMAIL'],
            variaveis=variaveis
        )
        
        if sucesso:
            print(f"‚úÖ Email de escala√ß√£o enviado para {tecnico['EMAIL']}")
            return True
        else:
            print("‚ùå Erro ao enviar email de escala√ß√£o")
            return False
    
    def exemplo_criar_template_personalizado(self):
        """
        Exemplo 7: Criar um template personalizado programaticamente
        """
        print("üìß Exemplo 7: Criando Template Personalizado")
        
        # Dados do template personalizado
        dados_template = {
            'nome': 'boas_vindas_cliente',
            'assunto': 'Bem-vindo ao SAOS - {nome_cliente}',
            'corpo_html': """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Bem-vindo ao SAOS</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="background: #3B82F6; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;">
            <h1 style="margin: 0;">SAOS - Sistema de Abertura de OS</h1>
        </div>
        
        <div style="background: #f9f9f9; padding: 20px; border-radius: 0 0 8px 8px;">
            <h2 style="color: #3B82F6;">Bem-vindo, {nome_cliente}!</h2>
            
            <p>Seja bem-vindo ao nosso sistema de suporte t√©cnico.</p>
            
            <p>A partir de agora voc√™ pode:</p>
            <ul>
                <li>Abrir solicita√ß√µes de suporte</li>
                <li>Acompanhar o status das suas solicita√ß√µes</li>
                <li>Receber atualiza√ß√µes por email</li>
                <li>Avaliar nossos servi√ßos</li>
            </ul>
            
            <div style="text-align: center; margin: 30px 0;">
                <a href="{link_dashboard}" style="background: #3B82F6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;">
                    Acessar Dashboard
                </a>
            </div>
            
            <p style="font-size: 12px; color: #666; text-align: center;">
                Este √© um email autom√°tico. N√£o responda a esta mensagem.
            </p>
        </div>
    </div>
</body>
</html>
            """,
            'corpo_texto': """
SAOS - Sistema de Abertura de OS

Bem-vindo, {nome_cliente}!

Seja bem-vindo ao nosso sistema de suporte t√©cnico.

A partir de agora voc√™ pode:
- Abrir solicita√ß√µes de suporte
- Acompanhar o status das suas solicita√ß√µes
- Receber atualiza√ß√µes por email
- Avaliar nossos servi√ßos

Acesse seu dashboard: {link_dashboard}

Este √© um email autom√°tico. N√£o responda a esta mensagem.
            """,
            'variaveis': ['nome_cliente', 'link_dashboard'],
            'ativo': True
        }
        
        # Criar o template
        sucesso = self.template_manager.criar_template(dados_template)
        
        if sucesso:
            print("‚úÖ Template personalizado criado com sucesso")
            return True
        else:
            print("‚ùå Erro ao criar template personalizado")
            return False
    
    def exemplo_uso_template_personalizado(self, email_cliente, nome_cliente):
        """
        Exemplo 8: Usar o template personalizado criado
        """
        print("üìß Exemplo 8: Usando Template Personalizado")
        
        # Preparar vari√°veis
        variaveis = {
            'nome_cliente': nome_cliente,
            'link_dashboard': f"http://localhost:5001/dashboard"
        }
        
        # Enviar email usando template personalizado
        sucesso = self.template_manager.enviar_email_com_template(
            nome_template='boas_vindas_cliente',
            destinatario=email_cliente,
            variaveis=variaveis
        )
        
        if sucesso:
            print(f"‚úÖ Email de boas-vindas enviado para {email_cliente}")
            return True
        else:
            print("‚ùå Erro ao enviar email de boas-vindas")
            return False
    
    # M√©todos auxiliares
    def _get_solicitacao_completa(self, solicitacao_id):
        """Obt√©m dados completos de uma solicita√ß√£o"""
        try:
            with db_connection() as con:
                cur = con.cursor()
                cur.execute("""
                    SELECT 
                        s.*,
                        c.NOME as NOME_CLIENTE,
                        c.EMAIL as EMAIL_CLIENTE,
                        cat.NOME as NOME_CATEGORIA,
                        p.NOME as NOME_PRIORIDADE,
                        st.NOME as NOME_STATUS
                    FROM SOLICITACOES s
                    JOIN USUARIOS c ON s.ID_CLIENTE = c.ID
                    JOIN CATEGORIAS cat ON s.ID_CATEGORIA = cat.ID
                    JOIN PRIORIDADES p ON s.ID_PRIORIDADE = p.ID
                    JOIN STATUS st ON s.ID_STATUS = st.ID
                    WHERE s.ID = ?
                """, (solicitacao_id,))
                
                row = cur.fetchone()
                if row:
                    columns = [description[0] for description in cur.description]
                    return dict(zip(columns, row))
                return None
                
        except Exception as e:
            print(f"Erro ao buscar solicita√ß√£o: {e}")
            return None
    
    def _get_status(self, status_id):
        """Obt√©m dados de um status"""
        try:
            with db_connection() as con:
                cur = con.cursor()
                cur.execute("SELECT * FROM STATUS WHERE ID = ?", (status_id,))
                row = cur.fetchone()
                if row:
                    columns = [description[0] for description in cur.description]
                    return dict(zip(columns, row))
                return None
                
        except Exception as e:
            print(f"Erro ao buscar status: {e}")
            return None
    
    def _get_usuario(self, usuario_id):
        """Obt√©m dados de um usu√°rio"""
        if not usuario_id:
            return None
            
        try:
            with db_connection() as con:
                cur = con.cursor()
                cur.execute("SELECT * FROM USUARIOS WHERE ID = ?", (usuario_id,))
                row = cur.fetchone()
                if row:
                    columns = [description[0] for description in cur.description]
                    return dict(zip(columns, row))
                return None
                
        except Exception as e:
            print(f"Erro ao buscar usu√°rio: {e}")
            return None
    
    def _formatar_prazo(self, prazo):
        """Formata o prazo para exibi√ß√£o"""
        if not prazo:
            return "N√£o definido"
        
        from datetime import datetime
        if isinstance(prazo, str):
            prazo = datetime.fromisoformat(prazo)
        
        return prazo.strftime('%d/%m/%Y √†s %H:%M')
    
    def _formatar_data(self, data):
        """Formata uma data para exibi√ß√£o"""
        if not data:
            return "N/A"
        
        from datetime import datetime
        if isinstance(data, str):
            data = datetime.fromisoformat(data)
        
        return data.strftime('%d/%m/%Y %H:%M')
    
    def _formatar_data_atual(self):
        """Retorna a data atual formatada"""
        from datetime import datetime
        return datetime.now().strftime('%d/%m/%Y %H:%M')
    
    def _calcular_tempo_resolucao(self, criacao, resolucao):
        """Calcula o tempo de resolu√ß√£o"""
        if not criacao or not resolucao:
            return "N√£o dispon√≠vel"
        
        from datetime import datetime
        if isinstance(criacao, str):
            criacao = datetime.fromisoformat(criacao)
        if isinstance(resolucao, str):
            resolucao = datetime.fromisoformat(resolucao)
        
        diferenca = resolucao - criacao
        dias = diferenca.days
        horas = diferenca.seconds // 3600
        
        if dias > 0:
            return f"{dias} dia(s) e {horas} hora(s)"
        else:
            return f"{horas} hora(s)"
    
    def _calcular_tempo_restante(self, prazo):
        """Calcula o tempo restante at√© o prazo"""
        if not prazo:
            return "Prazo n√£o definido"
        
        from datetime import datetime
        if isinstance(prazo, str):
            prazo = datetime.fromisoformat(prazo)
        
        agora = datetime.now()
        diferenca = prazo - agora
        
        if diferenca.total_seconds() < 0:
            return "Prazo expirado"
        
        dias = diferenca.days
        horas = diferenca.seconds // 3600
        
        if dias > 0:
            return f"{dias} dia(s) e {horas} hora(s)"
        else:
            return f"{horas} hora(s)"


# Exemplo de uso
if __name__ == "__main__":
    print("üöÄ Exemplos de Uso dos Templates de Email - SAOS")
    print("=" * 60)
    
    examples = EmailTemplatesExamples()
    
    # Exemplo 1: Criar template personalizado
    print("\n1. Criando template personalizado...")
    examples.exemplo_criar_template_personalizado()
    
    # Exemplo 2: Usar template personalizado
    print("\n2. Usando template personalizado...")
    examples.exemplo_uso_template_personalizado(
        email_cliente="cliente@exemplo.com",
        nome_cliente="Jo√£o Silva"
    )
    
    print("\n‚úÖ Exemplos conclu√≠dos!")
    print("\nüí° Para usar em produ√ß√£o:")
    print("1. Configure as credenciais de email no banco de dados")
    print("2. Crie os templates necess√°rios via interface administrativa")
    print("3. Integre as chamadas nos pontos apropriados do sistema")
    print("4. Monitore os logs de envio de emails")
