#!/usr/bin/env python3
"""
Script para testar o envio de email usando o template1.html
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.email_service import EmailService
from database.connection import db_connection
from datetime import datetime, timedelta

def test_email_template():
    """Testa o envio de email usando template1.html"""
    
    print("üß™ Testando envio de email com template1.html...")
    
    try:
        # Cria uma solicita√ß√£o de teste
        with db_connection() as con:
            cur = con.cursor()
            
            # Busca um usu√°rio de teste
            cur.execute("SELECT FIRST 1 ID, NOME, EMAIL FROM USUARIOS WHERE TIPO_USUARIO = 'CLIENTE'")
            usuario = cur.fetchone()
            
            if not usuario:
                print("‚ùå Nenhum usu√°rio cliente encontrado no banco")
                return False
            
            usuario_id, nome_cliente, email_cliente = usuario
            
            # Cria uma solicita√ß√£o de teste
            codigo_teste = f"TEST{datetime.now().strftime('%Y%m%d%H%M%S')}"
            
            cur.execute("""
                INSERT INTO SOLICITACOES (
                    CODIGO_REFERENCIA, TITULO, DESCRICAO, ID_CLIENTE, ID_CATEGORIA, 
                    ID_PRIORIDADE, ID_STATUS, SISTEMA, PRAZO_RESOLUCAO, 
                    DTHR_CRIACAO, DTHR_ATUALIZACAO
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            """, (
                codigo_teste, 
                "Teste de Email Template1", 
                "Esta √© uma solicita√ß√£o de teste para verificar o template1.html".encode('utf-8'),
                usuario_id, 
                1,  # Categoria padr√£o
                2,  # Prioridade m√©dia
                1,  # Status aberto
                "Sistema de Teste",
                datetime.now() + timedelta(hours=72)  # Prazo de 72 horas
            ))
            
            # Busca o ID da solicita√ß√£o criada
            cur.execute("SELECT ID FROM SOLICITACOES WHERE CODIGO_REFERENCIA = ?", (codigo_teste,))
            solicitacao_id = cur.fetchone()[0]
            
            con.commit()
            
            print(f"‚úÖ Solicita√ß√£o de teste criada: {codigo_teste} (ID: {solicitacao_id})")
            
            # Testa o envio de email
            email_service = EmailService()
            
            print(f"üìß Enviando email para: {email_cliente}")
            
            # Testa o m√©todo principal
            resultado = email_service.enviar_confirmacao_abertura(solicitacao_id)
            
            if resultado:
                print("‚úÖ Email enviado com sucesso usando template1.html!")
                print(f"üìß Destinat√°rio: {email_cliente}")
                print(f"üìã C√≥digo da solicita√ß√£o: {codigo_teste}")
            else:
                print("‚ùå Falha ao enviar email")
                return False
            
            # Limpa a solicita√ß√£o de teste
            cur.execute("DELETE FROM SOLICITACOES WHERE CODIGO_REFERENCIA = ?", (codigo_teste,))
            con.commit()
            
            print("üßπ Solicita√ß√£o de teste removida")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {str(e)}")
        return False

def test_template_variables():
    """Testa a substitui√ß√£o de vari√°veis no template"""
    
    print("\nüß™ Testando substitui√ß√£o de vari√°veis...")
    
    try:
        email_service = EmailService()
        
        # Vari√°veis de teste
        variaveis_teste = {
            'nome_cliente': 'Dr. Jo√£o Silva',
            'codigo_referencia': 'OS20241201001',
            'data_hora': '01/12/2024 - 14:30',
            'tipo_solicitacao': 'Problema de Acesso',
            'sistema': 'Sistema Principal',
            'prazo_estimado': '3 dias √∫teis',
            'link_acompanhamento': 'http://localhost:5001/acompanhar/OS20241201001'
        }
        
        # Gera o HTML do template
        html_gerado = email_service.get_template1_html(variaveis_teste)
        
        # Verifica se as vari√°veis foram substitu√≠das
        for chave, valor in variaveis_teste.items():
            if valor not in html_gerado:
                print(f"‚ùå Vari√°vel '{chave}' n√£o foi substitu√≠da corretamente")
                return False
        
        print("‚úÖ Todas as vari√°veis foram substitu√≠das corretamente")
        
        # Salva o HTML gerado para inspe√ß√£o
        with open('test_template_output.html', 'w', encoding='utf-8') as f:
            f.write(html_gerado)
        
        print("üìÑ HTML gerado salvo em 'test_template_output.html'")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar vari√°veis: {str(e)}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando testes do template de email...")
    
    # Testa substitui√ß√£o de vari√°veis
    if test_template_variables():
        print("‚úÖ Teste de vari√°veis passou")
    else:
        print("‚ùå Teste de vari√°veis falhou")
        sys.exit(1)
    
    # Testa envio de email
    if test_email_template():
        print("‚úÖ Teste de envio passou")
    else:
        print("‚ùå Teste de envio falhou")
        sys.exit(1)
    
    print("\nüéâ Todos os testes passaram com sucesso!")
    print("üìß O template1.html est√° funcionando corretamente")
